// –ú–æ—Ä—Å–∫–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ì—Ä–µ—Ç—ã –≤ –ì–∞–∑—É - –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –ø–æ –¢–ó

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
const TOKEN_ADDRESS = 'Ey59PH7Z4BFU4HjyKnyMdWt5GGN76KazTAwQihoUXRnk';
const API_ENDPOINTS = {
    dexscreener: `https://api.dexscreener.com/latest/dex/tokens/${TOKEN_ADDRESS}`,
    jupiter: `https://price.jup.ag/v4/price?ids=${TOKEN_ADDRESS}`,
    coingecko: `https://api.coingecko.com/api/v3/simple/token_price/solana?contract_addresses=${TOKEN_ADDRESS}&vs_currencies=usd&include_24hr_change=true&include_24hr_vol=true&include_market_cap=true`
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã
let gameData = {
    gretaSupport: 0,
    opponentSupport: 0,
    totalClicks: 0,
    usersOnline: 1337,
    gretaPosition: 15, // –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–æ –ì–∞–∑—ã
    tokenData: {
        marketCap: 0,
        price: 0,
        volume24h: 0,
        priceChange: 0,
        lastUpdate: 0
    }
};

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const elements = {
    // –¢–æ–∫–µ–Ω –¥–∞–Ω–Ω—ã–µ
    marketCap: document.getElementById('marketCap'),
    tokenPrice: document.getElementById('tokenPrice'),
    volume24h: document.getElementById('volume24h'),
    priceChange: document.getElementById('priceChange'),
    
    // –ü–µ—Ä—Å–æ–Ω–∞–∂–∏
    boat: document.getElementById('boat'),
    greta: document.getElementById('greta'),
    gretaEmotion: document.getElementById('gretaEmotion'),
    gretaSpeech: document.getElementById('gretaSpeech'),
    opponent: document.getElementById('opponent'),
    opponentEmotion: document.getElementById('opponentEmotion'),
    opponentSpeech: document.getElementById('opponentSpeech'),
    
    // –°—á–µ—Ç—á–∏–∫–∏
    gretaSupport: document.getElementById('gretaSupport'),
    opponentSupport: document.getElementById('opponentSupport'),
    gretaProgress: document.getElementById('gretaProgress'),
    opponentProgress: document.getElementById('opponentProgress'),
    totalClicks: document.getElementById('totalClicks'),
    usersOnline: document.getElementById('usersOnline'),
    
    // –≠—Ñ—Ñ–µ–∫—Ç—ã
    clickIndicator: document.getElementById('clickIndicator'),
    floatingEmojis: document.getElementById('floatingEmojis'),
    clickEffects: document.getElementById('clickEffects'),
    
    // UI
    buyToken: document.getElementById('buyToken'),
    loadingScreen: document.getElementById('loadingScreen')
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
document.addEventListener('DOMContentLoaded', () => {
    console.log('üåä –ó–∞–ø—É—Å–∫ –º–æ—Ä—Å–∫–æ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –ì—Ä–µ—Ç—ã...');
    
    // –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —ç–∫—Ä–∞–Ω
    setTimeout(() => {
        if (elements.loadingScreen) {
            elements.loadingScreen.style.display = 'none';
        }
        initializeGame();
    }, 1500);
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initializeGame() {
    console.log('üéÆ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã...');
    
    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
    bindEvents();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞
    startTokenDataFetching();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    startUserSimulation();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    showWelcomeMessage();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    updateUI();
    
    console.log('‚úÖ –ò–≥—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!');
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞
async function fetchTokenData() {
    console.log('üìä –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞...');
    
    try {
        // –ü—Ä–æ–±—É–µ–º DexScreener (–ª—É—á—à–∏–π –¥–ª—è Solana)
        const response = await fetch(API_ENDPOINTS.dexscreener);
        const data = await response.json();
        
        if (data.pairs && data.pairs.length > 0) {
            const pair = data.pairs[0];
            gameData.tokenData = {
                marketCap: parseFloat(pair.marketCap) || 0,
                price: parseFloat(pair.priceUsd) || 0,
                volume24h: parseFloat(pair.volume?.h24) || 0,
                priceChange: parseFloat(pair.priceChange?.h24) || 0,
                lastUpdate: Date.now()
            };
            
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞ –ø–æ–ª—É—á–µ–Ω—ã:', gameData.tokenData);
            updateTokenDisplay();
            updateBoatPosition();
            return true;
        }
    } catch (error) {
        console.warn('‚ö†Ô∏è DexScreener –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º Jupiter...');
    }
    
    try {
        // –†–µ–∑–µ—Ä–≤–Ω—ã–π Jupiter API
        const response = await fetch(API_ENDPOINTS.jupiter);
        const data = await response.json();
        
        if (data.data && data.data[TOKEN_ADDRESS]) {
            const tokenInfo = data.data[TOKEN_ADDRESS];
            gameData.tokenData = {
                marketCap: tokenInfo.marketCap || 0,
                price: parseFloat(tokenInfo.price) || 0,
                volume24h: 0,
                priceChange: 0,
                lastUpdate: Date.now()
            };
            
            console.log('‚úÖ Jupiter –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:', gameData.tokenData);
            updateTokenDisplay();
            updateBoatPosition();
            return true;
        }
    } catch (error) {
        console.warn('‚ö†Ô∏è Jupiter –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é...');
    }
    
    // –°–∏–º—É–ª—è—Ü–∏—è –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
    simulateTokenData();
    return false;
}

// –°–∏–º—É–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞
function simulateTokenData() {
    const baseMarketCap = 1500000; // $1.5M
    const volatility = 0.03; // 3% –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
    
    const change = (Math.random() - 0.5) * volatility;
    gameData.tokenData = {
        marketCap: Math.max(100000, baseMarketCap * (1 + change)),
        price: (baseMarketCap * (1 + change)) / 1000000000, // –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 1B supply
        volume24h: Math.random() * 300000 + 100000,
        priceChange: change * 100,
        lastUpdate: Date.now()
    };
    
    console.log('üé≤ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', gameData.tokenData);
    updateTokenDisplay();
    updateBoatPosition();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
function updateTokenDisplay() {
    if (elements.marketCap) {
        elements.marketCap.textContent = `$${formatNumber(gameData.tokenData.marketCap)}`;
    }
    
    if (elements.tokenPrice) {
        elements.tokenPrice.textContent = `$${gameData.tokenData.price.toFixed(8)}`;
    }
    
    if (elements.volume24h) {
        elements.volume24h.textContent = `$${formatNumber(gameData.tokenData.volume24h)}`;
    }
    
    if (elements.priceChange) {
        const change = gameData.tokenData.priceChange;
        elements.priceChange.textContent = `${change >= 0 ? '+' : ''}${change.toFixed(2)}%`;
        elements.priceChange.className = `stat-change ${change >= 0 ? 'positive' : 'negative'}`;
    }
}

// –ó–∞–ø—É—Å–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞
function startTokenDataFetching() {
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ä–∞–∑—É
    fetchTokenData();
    
    // –ó–∞—Ç–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    setInterval(() => {
        fetchTokenData();
    }, 30000);
}

// –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
function bindEvents() {
    console.log('üéØ –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è...');
    
    // –ö–ª–∏–∫–∏ –ø–æ —ç–∫—Ä–∞–Ω—É –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    document.addEventListener('click', handleScreenClick);
    
    // –ú–µ–≥–∞-–∫–ª–∏–∫–∏ –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º
    if (elements.greta) {
        elements.greta.addEventListener('click', (e) => {
            e.stopPropagation();
            handleGretaMegaClick(e);
        });
    }
    
    if (elements.opponent) {
        elements.opponent.addEventListener('click', (e) => {
            e.stopPropagation();
            handleOpponentMegaClick(e);
        });
    }
    
    // –ö–Ω–æ–ø–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–∫–µ–Ω–∞
    if (elements.buyToken) {
        elements.buyToken.addEventListener('click', handleBuyToken);
    }
    
    // –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    document.querySelectorAll('.social-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
            e.preventDefault();
            handleSocialClick(btn);
        });
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ —ç–∫—Ä–∞–Ω—É
function handleScreenClick(e) {
    const screenWidth = window.innerWidth;
    const clickX = e.clientX;
    const isLeftSide = clickX < screenWidth / 2;
    
    gameData.totalClicks++;
    
    if (isLeftSide) {
        supportGreta(e);
    } else {
        supportOpponent(e);
    }
    
    updateUI();
    updateBoatPosition();
    updateCharacterEmotions();
}

// –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ì—Ä–µ—Ç—ã
function supportGreta(e) {
    gameData.gretaSupport++;
    
    showClickIndicator(e.clientX, e.clientY, '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –ì—Ä–µ—Ç—É! üå±', '#4caf50');
    createFloatingEmojis(e.clientX, e.clientY, ['üå±', 'üåä', 'üíö', '‚úä', 'üåç']);
    
    const gretaPhrases = [
        '–°–ø–∞—Å–µ–º –ø–ª–∞–Ω–µ—Ç—É!',
        '–ö–∞–∫ –≤—ã —Å–º–µ–µ—Ç–µ!',
        '–ö–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è!',
        '–ù–∞—à–µ –±—É–¥—É—â–µ–µ!',
        '–ó–∞ –æ–∫–µ–∞–Ω—ã!'
    ];
    
    showSpeechBubble('gretaSpeech', randomChoice(gretaPhrases), 2000);
    createEffect('–°–ò–õ–ê –ü–†–ò–†–û–î–´!', e.clientX, e.clientY, '#4caf50');
}

// –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
function supportOpponent(e) {
    gameData.opponentSupport++;
    
    showClickIndicator(e.clientX, e.clientY, '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –ë–∏–∑–Ω–µ—Å! üí∞', '#ff9800');
    createFloatingEmojis(e.clientX, e.clientY, ['üí∞', 'üíº', 'üìà', 'üè¶', 'üíé']);
    
    const opponentPhrases = [
        '–ë–∏–∑–Ω–µ—Å –ø—Ä–µ–≤—ã—à–µ –≤—Å–µ–≥–æ!',
        '–î–µ–Ω—å–≥–∏ —Ä–µ—à–∞—é—Ç!',
        '–ü—Ä–∏–±—ã–ª—å –≤–∞–∂–Ω–µ–µ!',
        '–ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π —Å–µ–π—á–∞—Å!',
        '–ö–∞–ø–∏—Ç–∞–ª–∏–∑–º —Ä—É–ª–∏—Ç!'
    ];
    
    showSpeechBubble('opponentSpeech', randomChoice(opponentPhrases), 2000);
    createEffect('–°–ò–õ–ê –î–ï–ù–ï–ì!', e.clientX, e.clientY, '#ff9800');
}

// –ú–µ–≥–∞-–∫–ª–∏–∫ –ø–æ –ì—Ä–µ—Ç–µ
function handleGretaMegaClick(e) {
    gameData.gretaSupport += 5;
    gameData.totalClicks++;
    
    showClickIndicator(e.clientX, e.clientY, '–ú–ï–ì–ê –ü–û–î–î–ï–†–ñ–ö–ê –ì–†–ï–¢–´! üåä‚ö°', '#4caf50');
    createFloatingEmojis(e.clientX, e.clientY, ['üö¢', 'üåä', '‚ö°', 'üí™', 'üåü']);
    createConfetti('#4caf50');
    
    showSpeechBubble('gretaSpeech', '–ú–ï–ì–ê –°–ò–õ–ê –ü–†–ò–†–û–î–´!', 3000);
    createEffect('–û–ö–ï–ê–ù–°–ö–ê–Ø –ú–û–©–¨!', e.clientX, e.clientY, '#4caf50');
    
    updateUI();
    updateBoatPosition();
    updateCharacterEmotions();
}

// –ú–µ–≥–∞-–∫–ª–∏–∫ –ø–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É
function handleOpponentMegaClick(e) {
    gameData.opponentSupport += 5;
    gameData.totalClicks++;
    
    showClickIndicator(e.clientX, e.clientY, '–ú–ï–ì–ê –ü–û–î–î–ï–†–ñ–ö–ê –ë–ò–ó–ù–ï–°–ê! üí∞‚ö°', '#ff9800');
    createFloatingEmojis(e.clientX, e.clientY, ['üí∞', 'üíé', 'üè¶', 'üìä', 'üöÄ']);
    createConfetti('#ff9800');
    
    showSpeechBubble('opponentSpeech', '–ú–ï–ì–ê –°–ò–õ–ê –î–ï–ù–ï–ì!', 3000);
    createEffect('–ë–ò–ó–ù–ï–° –ú–û–©–¨!', e.clientX, e.clientY, '#ff9800');
    
    updateUI();
    updateBoatPosition();
    updateCharacterEmotions();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ª–æ–¥–∫–∏
function updateBoatPosition() {
    if (!elements.boat) return;
    
    // –ü–æ–∑–∏—Ü–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç Market Cap –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    const basePosition = 15;
    const marketCapInfluence = Math.min(gameData.tokenData.marketCap / 1000000, 40); // –Ω–∞ –º–∏–ª–ª–∏–æ–Ω—ã
    const supportInfluence = (gameData.gretaSupport - gameData.opponentSupport) * 0.3;
    
    gameData.gretaPosition = Math.max(5, Math.min(85, basePosition + marketCapInfluence + supportInfluence));
    
    elements.boat.style.left = `${gameData.gretaPosition}%`;
    
    console.log(`üö¢ –õ–æ–¥–∫–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏: ${gameData.gretaPosition.toFixed(1)}%`);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
function updateCharacterEmotions() {
    // –ì—Ä–µ—Ç–∞: —Ä–∞–¥—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ –±–ª–∏–∂–µ –∫ –ì–∞–∑–µ (>50%)
    const gretaIsHappy = gameData.gretaPosition > 50;
    
    if (elements.gretaEmotion) {
        elements.gretaEmotion.textContent = gretaIsHappy ? 'üòä' : 'üòü';
    }
    
    // –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ —ç–º–æ—Ü–∏–∏
    if (elements.opponentEmotion) {
        elements.opponentEmotion.textContent = gretaIsHappy ? 'üò§' : 'üòé';
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
function updateUI() {
    // –°—á–µ—Ç—á–∏–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    if (elements.gretaSupport) {
        elements.gretaSupport.textContent = formatNumber(gameData.gretaSupport);
    }
    
    if (elements.opponentSupport) {
        elements.opponentSupport.textContent = formatNumber(gameData.opponentSupport);
    }
    
    // –û–±—â–∏–µ –∫–ª–∏–∫–∏
    if (elements.totalClicks) {
        elements.totalClicks.textContent = formatNumber(gameData.totalClicks);
    }
    
    // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã
    updateProgressBars();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤
function updateProgressBars() {
    const total = gameData.gretaSupport + gameData.opponentSupport;
    if (total > 0) {
        const gretaPercent = (gameData.gretaSupport / total) * 100;
        const opponentPercent = (gameData.opponentSupport / total) * 100;
        
        if (elements.gretaProgress) {
            elements.gretaProgress.style.width = `${gretaPercent}%`;
        }
        
        if (elements.opponentProgress) {
            elements.opponentProgress.style.width = `${opponentPercent}%`;
        }
    }
}

// –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω
function startUserSimulation() {
    setInterval(() => {
        gameData.usersOnline += Math.floor(Math.random() * 10) - 5;
        gameData.usersOnline = Math.max(1000, gameData.usersOnline);
        
        if (elements.usersOnline) {
            elements.usersOnline.textContent = formatNumber(gameData.usersOnline);
        }
    }, 5000);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫–ª–∏–∫–∞
function showClickIndicator(x, y, text, color) {
    if (!elements.clickIndicator) return;
    
    elements.clickIndicator.textContent = text;
    elements.clickIndicator.style.left = x + 'px';
    elements.clickIndicator.style.top = y + 'px';
    elements.clickIndicator.style.color = color;
    elements.clickIndicator.style.opacity = '1';
    elements.clickIndicator.style.transform = 'scale(1)';
    
    setTimeout(() => {
        elements.clickIndicator.style.opacity = '0';
        elements.clickIndicator.style.transform = 'scale(1.2) translateY(-40px)';
    }, 100);
}

// –°–æ–∑–¥–∞—Ç—å –ø–ª–∞–≤–∞—é—â–∏–µ —ç–º–æ–¥–∑–∏
function createFloatingEmojis(x, y, emojis) {
    if (!elements.floatingEmojis) return;
    
    emojis.forEach((emoji, index) => {
        const element = document.createElement('div');
        element.textContent = emoji;
        element.className = 'floating-emoji';
        element.style.left = (x + (index - emojis.length/2) * 25) + 'px';
        element.style.top = y + 'px';
        
        elements.floatingEmojis.appendChild(element);
        
        setTimeout(() => {
            element.remove();
        }, 3000);
    });
}

// –°–æ–∑–¥–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç
function createEffect(text, x, y, color) {
    if (!elements.clickEffects) return;
    
    const element = document.createElement('div');
    element.textContent = text;
    element.style.position = 'absolute';
    element.style.left = x + 'px';
    element.style.top = y + 'px';
    element.style.fontSize = '1.5rem';
    element.style.fontWeight = '600';
    element.style.color = color;
    element.style.textShadow = '0 2px 8px rgba(0,0,0,0.5)';
    element.style.animation = 'floatUp 2s ease-out forwards';
    element.style.pointerEvents = 'none';
    element.style.zIndex = '1000';
    element.style.transform = 'rotate(' + (Math.random() * 10 - 5) + 'deg)';
    
    elements.clickEffects.appendChild(element);
    
    setTimeout(() => {
        element.remove();
    }, 2000);
}

// –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
function createConfetti(color) {
    if (!elements.floatingEmojis) return;
    
    const confettiEmojis = ['üéâ', '‚≠ê', 'üí´', '‚ú®', 'üåü'];
    
    for (let i = 0; i < 10; i++) {
        const element = document.createElement('div');
        element.textContent = confettiEmojis[Math.floor(Math.random() * confettiEmojis.length)];
        element.className = 'floating-emoji';
        element.style.left = Math.random() * window.innerWidth + 'px';
        element.style.top = Math.random() * window.innerHeight + 'px';
        element.style.fontSize = '1.5rem';
        
        elements.floatingEmojis.appendChild(element);
        
        setTimeout(() => {
            element.remove();
        }, 3000);
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—á–µ–≤–æ–π –ø—É–∑—ã—Ä—å
function showSpeechBubble(bubbleId, text, duration) {
    const bubble = document.getElementById(bubbleId);
    if (!bubble) return;
    
    bubble.textContent = text;
    bubble.classList.add('active');
    
    setTimeout(() => {
        bubble.classList.remove('active');
    }, duration);
}

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
function showWelcomeMessage() {
    setTimeout(() => {
        createEffect('üåä –ú–æ—Ä—Å–∫–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –Ω–∞—á–∞–ª–æ—Å—å!', window.innerWidth / 2, window.innerHeight / 2, '#2196f3');
        showSpeechBubble('gretaSpeech', '–ü–æ–ø–ª—ã–ª–∏ —Å–ø–∞—Å–∞—Ç—å –ø–ª–∞–Ω–µ—Ç—É!', 3000);
        showSpeechBubble('opponentSpeech', '–î–µ–Ω—å–≥–∏ –≤–∞–∂–Ω–µ–µ –≤—Å–µ–≥–æ!', 3000);
    }, 500);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–∫–µ–Ω–∞
function handleBuyToken() {
    createEffect('üöÄ –ü–û–ö–£–ü–ê–ï–ú $GRETA!', window.innerWidth / 2, window.innerHeight / 2, '#2196f3');
    createConfetti('#2196f3');
    
    // –ë–æ–Ω—É—Å –¥–ª—è –ì—Ä–µ—Ç—ã
    gameData.gretaSupport += 10;
    gameData.totalClicks++;
    
    updateUI();
    updateBoatPosition();
    updateCharacterEmotions();
    
    showSpeechBubble('gretaSpeech', '–°–ü–ê–°–ò–ë–û –ó–ê –ü–û–î–î–ï–†–ñ–ö–£!', 4000);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
function handleSocialClick(btn) {
    const platform = btn.querySelector('span:last-child').textContent;
    createEffect(`üåä –û—Ç–∫—Ä—ã–≤–∞–µ–º ${platform}!`, btn.offsetLeft, btn.offsetTop, '#2196f3');
    
    // –ú–∞–ª–µ–Ω—å–∫–∏–π –±–æ–Ω—É—Å
    gameData.gretaSupport += 1;
    updateUI();
}

// –£—Ç–∏–ª–∏—Ç—ã
function formatNumber(num) {
    if (num >= 1000000000) {
        return (num / 1000000000).toFixed(1) + 'B';
    } else if (num >= 1000000) {
        return (num / 1000000).toFixed(1) + 'M';
    } else if (num >= 1000) {
        return (num / 1000).toFixed(1) + 'K';
    }
    return num.toString();
}

function randomChoice(array) {
    return array[Math.floor(Math.random() * array.length)];
}

// –ú–æ—Ä—Å–∫–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –º—ã—à–∏
document.addEventListener('mousemove', (e) => {
    if (Math.random() < 0.005) { // 0.5% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
        const ripple = document.createElement('div');
        ripple.textContent = 'üåä';
        ripple.style.position = 'fixed';
        ripple.style.left = e.clientX + 'px';
        ripple.style.top = e.clientY + 'px';
        ripple.style.pointerEvents = 'none';
        ripple.style.fontSize = '1rem';
        ripple.style.animation = 'floatUp 2s ease-out forwards';
        ripple.style.zIndex = '50';
        ripple.style.opacity = '0.6';
        
        document.body.appendChild(ripple);
        
        setTimeout(() => {
            ripple.remove();
        }, 2000);
    }
});

// –°–ª—É—á–∞–π–Ω—ã–µ –º–æ—Ä—Å–∫–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
setInterval(() => {
    if (Math.random() < 0.15) { // 15% –∫–∞–∂–¥—ã–µ 12 —Å–µ–∫—É–Ω–¥
        const effects = ['–í–°–ü–õ–ï–°–ö!', '–í–û–õ–ù–ê!', '–û–ö–ï–ê–ù!'];
        const effect = effects[Math.floor(Math.random() * effects.length)];
        const x = Math.random() * window.innerWidth;
        const y = Math.random() * window.innerHeight;
        
        if (elements.clickEffects) {
            const element = document.createElement('div');
            element.textContent = effect;
            element.style.position = 'absolute';
            element.style.left = x + 'px';
            element.style.top = y + 'px';
            element.style.fontSize = '1.2rem';
            element.style.fontWeight = '500';
            element.style.color = 'rgba(33, 150, 243, 0.4)';
            element.style.animation = 'floatUp 3s ease-out forwards';
            element.style.pointerEvents = 'none';
            element.style.zIndex = '30';
            
            elements.clickEffects.appendChild(element);
            
            setTimeout(() => {
                element.remove();
            }, 3000);
        }
    }
}, 12000);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
window.addEventListener('error', (e) => {
    console.warn('üåä –û—à–∏–±–∫–∞ –º–æ—Ä—Å–∫–æ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è:', e.error);
    if (elements.loadingScreen) {
        elements.loadingScreen.style.display = 'none';
    }
});

console.log('üåä –°–∫—Ä–∏–ø—Ç –º–æ—Ä—Å–∫–æ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω!');